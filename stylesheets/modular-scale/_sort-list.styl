// List sorting via a modified merge-sort algorythmn
// http://en.wikipedia.org/wiki/Merge_sort

ms-run-through-remainder($array, $counter, $return)
    if $counter < length($array)
        $current = $array[$counter]

        if $current != $return[-1]
            push($return, $current)
        $counter += 1
        ms-run-through-remainder($array, $counter, $return)
    else
        return $return

ms-merge($A, $B)

    $Return = ()

    // Some empty lists get passed through
    // so just pass the other list throguh
    if length($A) == 0
        return $B

    // If lists fit next to each other, just merge them
    // This helps performance skipping the need to check each value
    if $A[-1] < $B[0]
        push($A, $B)
        return $A

    if $B[-1] < $A[0]
        push($B, $A)
        return $B

    // Counters start at 1
    $A-counter = 0
    $B-counter = 0

    // Start looping through all numbers in array
    ms-loop-through($a-array, $b-array, $return)

        if $A-counter < length($a-array) and $B-counter < length($b-array)
            // Check if the A value is smaller
            // Uses or equal to avoid duplicate numbers
            if $a-array[$A-counter] <= $b-array[$B-counter]
                push($return, $a-array[$A-counter])
                $A-counter[0] = $A-counter[0] + 1

            // Check if the B value is smaller
            else if $a-array[$A-counter] > $b-array[$B-counter]
                push($return, $b-array[$B-counter])
                $B-counter[0] = $B-counter[0] + 1

            ms-loop-through($a-array, $b-array, $return)
        else
            return $return

    $Return = ms-loop-through($A, $B, $Return)

    // Run through remainder values in the list
    $Return = ms-run-through-remainder($A, $A-counter, $Return)

    $Return = ms-run-through-remainder($B, $B-counter, $Return)

    // Done! return is now sorted and complete
    return $Return

// Pull it all together
ms-sort-list($Lists)
    $Return = ()


    for $List in $Lists
        if $Return == ()
            $Return = $List
        else
            $Return = ms-merge($List, $Return)

    // final cleanup of repeated items
    $Last = null
    $New-list = ()

    for $Item in $Return
        if $Item != $Last
            push($New-list, $Item)

        $Last = $Item

    $Return = $New-list
    return $Return